Task-05: Rolling Updates And Rolling Back Deployments in Kubernetes
===================================================================

People who are really serious about software should make their own hardware.

– Alan Kay

Sometimes things aren’t clear right away. That’s where you need to be patient and persevere and see where things lead.

– Mary Pierce

Study hard what interests you the most in the most undisciplined, irreverent and original manner possible.

– Richard P. Feynman

You can’t go back and change the beginning, but you can start where you are and change the ending.

– C.S. Lewis

Task:
-----


There is a production deployment planned for next week. The Nautilus DevOps team wants to test the deployment update and rollback on Dev environment first so that they can identify the risks in advance. Below you can find more details about the plan they want to execute.

    Create a namespace nautilus. Create a deployment called httpd-deploy under this new namespace, It should have one container called httpd, use httpd:2.4.25 image and 3 replicas. The deployment should use RollingUpdate strategy with maxSurge=1, and maxUnavailable=2. Also create a NodePort type service named httpd-service and expose the deployment on nodePort: 30008.

    Now upgrade the deployment to version httpd:2.4.43 using a rolling update.

    Finally, once all pods are updated undo the recent update and roll back to the previous/original version.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Resolution:
-----------

1- Create namespace

- kubectl get  namespace

- kubectl create namespace nautilus

2- Create a deployment

- kubectl get deployment -n httpd-deploy

- cd /tmp/
- vi httpd.yaml

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: httpd-deploy
  namespace: nautilus
spec:
  minReadySeconds: 5
  replicas: 3
  selector: 
    matchLabels:
      service: httpd
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      labels:
        service: httpd

    spec:
      containers:  
        - name: httpd
          image: httpd:2.4.28
        
 - kubectl apply -f httpd.yaml --namespace=nautilus
 - kubectl get deployment -n nautilus -o wide

 - kubectl get pods -n  nautilus 

 - kubectl set image deployment/httpd-deploy httpd=httpd:2.4.43 --namespace=nautilus  --record=true

 - kubectl get pods -n nautilus

 - kubectl get all -n nautilus

 - kubectl describe deploy httpd-deploy -n nautilus

 - kubectl rollout status deployment httpd-deploy -n nautilus

 - kubectl rollout history deployment httpd-deploy -n nautilus

* Rollback deployment

 - kubectl rollout undo deployment httpd-deploy -n nautilus


 2- create a NodePort type service named httpd-service and expose the deployment on nodePort: 30008

 apiVersion: v1
kind: Service
metadata:
  name: httpd-service
spec:
  selector:
    app: httpd
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30008

   kubectl apply -f httpd.yaml --namespace=devops
